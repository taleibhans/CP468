import pygame
import sys
import os
import random
import google.generativeai as genai

# Initialize Gemini API
genai.configure(api_key="AIzaSyAex8riLQg9v8gX6TS4JelhJdJy6CAvbDs")  
model = genai.GenerativeModel("models/gemini-1.5-pro-002")  
chat = model.start_chat()

# Initialize pygame
pygame.init()

# Screen dimensions
WIDTH, HEIGHT = 600, 600
SQUARE_SIZE = WIDTH // 3
CIRCLE_RADIUS = SQUARE_SIZE // 3
CIRCLE_WIDTH = 15
CROSS_WIDTH = 20
SPACE = 30

# Colors
BG_COLOR = (56, 61, 59)  
LINE_COLOR = (100, 105, 103)
CIRCLE_COLOR = (71, 221, 92)  # Green O
CROSS_COLOR = (221, 71, 82)  # Red X

# Get base directory
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Load images
main_menu_img = pygame.image.load(os.path.join(BASE_DIR, 'mainmenu.png'))
mode_menu_img = pygame.image.load(os.path.join(BASE_DIR, 'mainmenu2_1.png'))
draw_screen_img = pygame.image.load(os.path.join(BASE_DIR, 'draw.png'))

pause_screen_img = pygame.image.load(os.path.join(BASE_DIR, 'pausescreen.png'))  # Pause screen
guide_screen_img = pygame.image.load(os.path.join(BASE_DIR, 'guidescreen.png'))  # Guide screen

# Local Mode Win Screens
local_win_X_img = pygame.image.load(os.path.join(BASE_DIR, 'player1.png'))  # Local Player X win screen
local_win_O_img = pygame.image.load(os.path.join(BASE_DIR, 'player2.png'))  # Local Player O win screen

# AI Mode Win Screens
ai_win_X_img = pygame.image.load(os.path.join(BASE_DIR, 'winscreen.png'))  # AI Mode Player X win
ai_win_O_img = pygame.image.load(os.path.join(BASE_DIR, 'aiagent.png'))  # AI Mode AI O win

# Initialize screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Tic-Tac-Toe with AI')

# Board setup
def reset_board():
    global board, player, menu
    board = [[None] * 3 for _ in range(3)]
    player = 'X'
    menu = 'game'

reset_board()
menu = 'main'
game_mode = None  # 'local', 'ai', or 'gemini'

# Drawing functions
def draw_grid():
    for row in range(1, 3):
        pygame.draw.line(screen, LINE_COLOR, (0, row * SQUARE_SIZE), (WIDTH, row * SQUARE_SIZE), 10)
        pygame.draw.line(screen, LINE_COLOR, (row * SQUARE_SIZE, 0), (row * SQUARE_SIZE, HEIGHT), 10)

def draw_figures():
    for row in range(3):
        for col in range(3):
            if board[row][col] == 'O':
                pygame.draw.circle(screen, CIRCLE_COLOR, (col * SQUARE_SIZE + SQUARE_SIZE//2, row * SQUARE_SIZE + SQUARE_SIZE//2), CIRCLE_RADIUS, CIRCLE_WIDTH)
            elif board[row][col] == 'X':
                pygame.draw.line(screen, CROSS_COLOR, (col * SQUARE_SIZE + SPACE, row * SQUARE_SIZE + SPACE), 
                                 (col * SQUARE_SIZE + SQUARE_SIZE - SPACE, row * SQUARE_SIZE + SQUARE_SIZE - SPACE), CROSS_WIDTH)
                pygame.draw.line(screen, CROSS_COLOR, (col * SQUARE_SIZE + SPACE, row * SQUARE_SIZE + SQUARE_SIZE - SPACE), 
                                 (col * SQUARE_SIZE + SQUARE_SIZE - SPACE, row * SQUARE_SIZE + SPACE), CROSS_WIDTH)

def draw_menu():
    if menu == 'main':
        screen.blit(main_menu_img, (0, 0))
    elif menu == 'mode':
        screen.blit(mode_menu_img, (0, 0))
    elif menu == 'win_X':
        if game_mode == 'local':
            screen.blit(local_win_X_img, (0, 0))  # Local Player X win screen
        else:
            screen.blit(ai_win_X_img, (0, 0))  # AI Mode Player X win screen
    elif menu == 'win_O':
        if game_mode == 'local':
            screen.blit(local_win_O_img, (0, 0))  # Local Player O win screen
        else:
            screen.blit(ai_win_O_img, (0, 0))  # AI Mode AI O win screen
    elif menu == 'draw':
        screen.blit(draw_screen_img, (0, 0))
    elif menu == 'pause':
        screen.blit(pause_screen_img, (0, 0))  # Pause screen
    elif menu == 'guide':
        screen.blit(guide_screen_img, (0, 0))  # Guide screen

# Game Logic Functions
def is_winner(player):
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_draw():
    return all(cell is not None for row in board for cell in row)

# Minimax Algorithm
def evaluate(ai_symbol, player_symbol):
    if is_winner(ai_symbol): 
        return 10
    if is_winner(player_symbol): 
        return -10
    return 0

def minimax(depth, is_maximizing, ai_symbol, player_symbol, alpha, beta):
    score = evaluate(ai_symbol, player_symbol)
    if score == 10 or score == -10:
        return score - depth
    if is_draw():
        return 0
    
    if is_maximizing:
        best = -float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] is None:
                    board[i][j] = ai_symbol
                    best = max(best, minimax(depth + 1, False, ai_symbol, player_symbol, alpha, beta))
                    board[i][j] = None
                    alpha = max(alpha, best)
                    if beta <= alpha:
                        break
        return best
    else:
        best = float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] is None:
                    board[i][j] = player_symbol
                    best = min(best, minimax(depth + 1, True, ai_symbol, player_symbol, alpha, beta))
                    board[i][j] = None
                    beta = min(beta, best)
                    if beta <= alpha:
                        break
        return best

def find_best_move():
    best_val = -float("inf")
    best_move = None
    ai_symbol = 'O'
    player_symbol = 'X'
    
    for i in range(3):
        for j in range(3):
            if board[i][j] is None:
                board[i][j] = ai_symbol
                move_val = minimax(0, False, ai_symbol, player_symbol, -float("inf"), float("inf"))
                board[i][j] = None
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    
    return best_move

# Gemini Move Function
def get_gemini_move():
    """Ask Gemini for a move based on the current board state."""
    try:
        # Convert the board to a string representation
        board_str = "\n".join([" | ".join([cell if cell else " " for cell in row]) for row in board])
        prompt = (
            f"You are playing Tic-Tac-Toe as 'O'. The current board is:\n"
            f"{board_str}\n"
            f"Where should 'O' move next? Respond with the row and column numbers (1-3) in the format 'row, col'."
        )
        
        # Get Gemini's response
        response = chat.send_message(prompt)
        move = response.text.strip().split(", ")
        
        # Convert to zero-based indices
        row = int(move[0]) - 1
        col = int(move[1]) - 1
        
        return row, col
    except Exception as e:
        print(f"Error getting Gemini move: {e}")
        return None

# Main Game Loop
def main():
    global menu, game_mode, player
    clock = pygame.time.Clock()
    running = True
    while running:
        screen.fill(BG_COLOR)
        if menu == 'game':
            draw_grid()
            draw_figures()
        else:
            draw_menu()
        pygame.display.update()
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if menu in ['win_X', 'win_O', 'draw']:  # Rematch or exit to main menu
                    if event.key == pygame.K_r:
                        reset_board()
                    elif event.key == pygame.K_ESCAPE:
                        menu = 'main'
                elif menu == 'main':
                    if event.key == pygame.K_r:
                        menu = 'mode'
                    elif event.key == pygame.K_i:  # Open Guide Screen
                        menu = 'guide'
                    elif event.key == pygame.K_ESCAPE:
                        running = False
                elif menu == 'mode':
                    if event.key == pygame.K_l:
                        reset_board()
                        game_mode = 'local'
                    elif event.key == pygame.K_a:
                        reset_board()
                        game_mode = 'ai'
                    elif event.key == pygame.K_g:  # New option for Gemini
                        reset_board()
                        game_mode = 'gemini'
                    elif event.key == pygame.K_ESCAPE:
                        menu = 'main'
                elif menu == 'guide':  # Exit guide screen
                    if event.key == pygame.K_ESCAPE:
                        menu = 'main'
                elif menu == 'pause':  # Resume or exit from pause screen
                    if event.key == pygame.K_r:
                        menu = 'game'
                    elif event.key == pygame.K_ESCAPE:
                        menu = 'main'
                elif menu == 'game':  # Pause the game
                    if event.key == pygame.K_ESCAPE:
                        menu = 'pause'
            elif event.type == pygame.MOUSEBUTTONDOWN and menu == 'game':
                x, y = event.pos
                row, col = y // SQUARE_SIZE, x // SQUARE_SIZE
                if board[row][col] is None:
                    board[row][col] = player
                    if is_winner(player):
                        menu = f'win_{player}'
                    elif is_draw():
                        menu = 'draw'
                    else:
                        if game_mode == 'local':
                            player = 'O' if player == 'X' else 'X'
                        elif game_mode == 'ai':
                            ai_move = find_best_move()
                            if ai_move:
                                board[ai_move[0]][ai_move[1]] = 'O'
                                if is_winner('O'):
                                    menu = 'win_O'
                        elif game_mode == 'gemini':
                            gemini_move = get_gemini_move()
                            if gemini_move:
                                row, col = gemini_move
                                if 0 <= row < 3 and 0 <= col < 3 and board[row][col] is None:
                                    board[row][col] = 'O'
                                    if is_winner('O'):
                                        menu = 'win_O'
                                else:
                                    print("Invalid move from Gemini. Falling back to random move.")
                                    # Fallback to a random move
                                    empty_cells = [(i, j) for i in range(3) for j in range(3) if board[i][j] is None]
                                    if empty_cells:
                                        row, col = random.choice(empty_cells)
                                        board[row][col] = 'O'
                                        if is_winner('O'):
                                            menu = 'win_O'

        clock.tick(60)
    pygame.quit()
    sys.exit()

if __name__ == '__main__':
    main()